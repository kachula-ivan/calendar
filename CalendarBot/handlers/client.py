import asyncio
import smtplib
from email.mime.text import MIMEText

from aiogram import types
from aiogram.dispatcher import FSMContext

import database
from config import dp, bot
import keyboards as kb
import handlers.states as states
import handlers.admin
import pandas as pd
from openpyxl import Workbook
import database.db_commands as db_com


wb = Workbook()
ws = wb.active

ws.append(['ID –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞', '–î–∞—Ç–∞', '–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫', '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'])
#######################################################################################################################################

async def anti_flood(*args, **kwargs):
    m = args[0]
    await m.answer("–ù–µ —Ñ–ª—É–¥–∏ :) –û–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥—É")

#######################################################################################################################################


#######################################################################################################################################

async def send_email(message: types.Message):
    try:
        pool = await database.db_api.create_pool()
        sender = "bot.management.trx@gmail.com"
        password = "dztaoaixiiljstqi"
        recipient = await db_com.select_email(pool, message.text)
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        try:
            with open("gmail.html") as file:
                template = file.read()
        except IOError:
            return "The template file doesn't found!"

        try:
            server.login(sender, password)
            msg = MIMEText(template, "html")
            msg["From"] = sender
            msg["To"] = recipient
            msg["Subject"] = "Telegram TRX BOT registration confirmation"
            server.sendmail(sender, recipient, msg.as_string())
        except Exception as _ex:
            pass
    except:
        pass

#######################################################################################################################################


#######################################################################################################################################

@dp.message_handler(commands=["start"])
@dp.throttled(anti_flood, rate=1)
async def start_handler(message: types.Message):
    date_time = pd.Timestamp.now().strftime('%Y-%m-%d %H-%M-%S')
    date_time_save = pd.Timestamp.now().strftime('%Y-%m-%d')
    ws.append([message.from_user.id, date_time, f"{message.from_user.first_name} {message.from_user.last_name} @{message.from_user.username}", message.text])
    file_name = 'messages_' + date_time_save + '.xlsx'
    wb.save(f'logging/{file_name}')
    pool = await database.db_api.create_pool()

    if message.chat.type == 'private':
        try:
            telegram_id = message.from_user.id
            if await db_com.check_user_existence(pool, telegram_id):
                await message.answer("‚úÖ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∞–º –±—É–¥—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞—à—ñ –ø–æ–¥—ñ—ó —É –¢–µ–ª–µ–≥—Ä–∞–º")
            else:
                captcha_num = 633912
                await states.reg.mail.set()
                await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—Ç—É –Ω–∞ —è–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç")
                @dp.message_handler(state=states.reg.mail)
                async def mail(message: types.Message, state: FSMContext):

                    async with state.proxy() as data:
                        data['email'] = message.text
                    await message.answer("‚úâ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é –ø–æ—à—Ç—É. –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥: üëá", reply_markup=kb.markup_code)
                    await send_email(message=message)
                    await states.reg.next()

                @dp.message_handler(state=states.reg.code)
                async def type_captcha(message: types.Message, state: FSMContext):
                    try:
                        async with state.proxy() as data:
                            data['email'] = data['email']
                        if str(
                            message.text) == '–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –ø–æ—à—Ç—É' or message.text == "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É" or message.text == "Enter another mail":
                            await states.reg.mail.set()
                            await message.answer('üì® –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –ø–æ—à—Ç—É', reply_markup=types.ReplyKeyboardRemove())
                            return
                        else:
                            pass
                        if message.text.isdigit():
                            if int(message.text) == captcha_num:
                                if await db_com.select_email(pool, data['email']):
                                    username = '@' + message.from_user.username
                                    await db_com.reg_user(pool, data['email'], username, message.from_user.id)
                                    await message.answer('‚Ñπ –í–∏ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –¥–æ –∞–∫–∫–∞—É–Ω—Ç—É!')
                                    # await message.answer('‚Ñπ –©–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ /start_messages')
                                    await message.answer('‚úÖ –¢–µ–ø–µ—Ä —Å—é–¥–∏ –≤–∞–º –±—É–¥—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∞—à—ñ –ø–æ–¥—ñ—ó')
                                    await state.finish()
                                else:
                                    await message.answer('‚Ñπ –¢–∞–∫–∞ –ø–æ—à—Ç–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ!', reply_markup=types.ReplyKeyboardRemove())
                                    await states.reg.mail.set()
                                    await message.answer('üì® –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –ø–æ—à—Ç—É')
                            else:
                                await message.answer('‚Ñπ –ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=kb.markup_code)
                                await message.answer('‚Ñπ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —â–æ —Ü–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç')
                        else:
                            await message.answer('‚Ñπ –ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=kb.markup_code)
                            await message.answer('‚Ñπ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —â–æ —Ü–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç')
                    except:
                        await message.answer('‚Ñπ –ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=kb.markup_code)
                        await message.answer('‚Ñπ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —â–æ —Ü–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç')
        except:
            await message.answer('‚ùó –ë–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ—Å–æ–±–∏—Å—Ç–æ, –Ω–µ –º–æ–∂–Ω–∞ –π–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç–∏ –≤ –≥—Ä—É–ø–∏. –ü–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å –∑ –Ω–∏–º —Å–∞–º—ñ: @trx_games_bot\n–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ —ñ–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: @Christooo1')
    else:
        await message.answer('‚ùó –ë–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ—Å–æ–±–∏—Å—Ç–æ, –Ω–µ –º–æ–∂–Ω–∞ –π–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç–∏ –≤ –≥—Ä—É–ø–∏. –ü–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å –∑ –Ω–∏–º —Å–∞–º—ñ: @trx_games_bot\n–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ —ñ–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: @Christooo1')

#######################################################################################################################################



#######################################################################################################################################
@dp.message_handler(commands=["help"])
@dp.throttled(anti_flood, rate=1)
async def help_handler(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì∫ –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—å —ñ–∑ –ø—Ä–æ–±–ª–µ–º–æ—é", url="https://t.me/Christooo1"))
    await message.answer("‚Ñπ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –±–æ—Ç—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É: /start \n\nüë®‚Äçüîß –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ª–∏—à–∏–ª–∞—Å—å, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, –≤—ñ–Ω –≤—Å–µ –≤–ª–∞–¥–Ω–∞—î:\nhttps://t.me/Christooo1", reply_markup=markup)
#######################################################################################################################################


#######################################################################################################################################

@dp.message_handler(content_types=['text'])
@dp.throttled(anti_flood, rate=1)
async def text_message(message: types.Message):

    date_time = pd.Timestamp.now().strftime('%Y-%m-%d %H-%M-%S')
    date_time_save = pd.Timestamp.now().strftime('%Y-%m-%d')
    ws.append([message.from_user.id, date_time, f"{message.from_user.first_name} {message.from_user.last_name} @{message.from_user.username}", message.text])
    file_name = 'messages_' + date_time_save + '.xlsx'
    wb.save(f'logging/{file_name}')

    if (message.text == "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"):
        await message.answer('‚Ñπ –í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üëÄ')
    else:
        await bot.send_message(message.from_user.id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞!\n\n–í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É –≤ —á–∞—Ç –±–æ—Ç–∞, –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é –±—É–ª–∞ –∑–º—ñ–Ω–µ–Ω–∞ –ê–¥–º—ñ–Ω–æ–º.\n\n‚Ñπ  –ù–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä—è–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç—É –∞–±–æ –æ–±–Ω–æ–≤—ñ—Ç—å –ú–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start", parse_mode='html')

#######################################################################################################################################


async def check_messages():
    while True:
        pool = await database.db_api.create_pool()
        users_result = await db_com.get_users(pool)
        users = users_result.result()
        for user in users:
            await asyncio.sleep(0.33)
            user_id = user[0]
            messages_result = await db_com.get_title_start(pool, user_id)
            messages = messages_result.result()
            for title in messages:
                await bot.send_message(user_id, f'‚Ñπ –¶–µ –¥—Ä—É–∂–Ω—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ç–µ, —â–æ –ø–æ–¥—ñ—è —è–∫—É –≤–∏ –∑–∞–ø–ª–∞–Ω—É–≤–∞–ª–∏ –†–û–ó–ü–û–ß–ê–õ–ê–°–¨.\n\nüéü –ü–æ–¥—ñ—è: <b>{title[0]}</b>\n\n‚è≥ –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É: <b>{title[1].strftime("%Y-%m-%d %H:%M")}</b>\n\n‚åõ –î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: <b>{title[2].strftime("%Y-%m-%d %H:%M")}</b>')
                await db_com.send_message_start(pool, user_id, title[3])
            messages_result_end = await db_com.get_title_end(pool, user_id)
            messages_end = messages_result_end.result()
            for title in messages_end:
                await bot.send_message(user_id, f'‚Ñπ –¶–µ –¥—Ä—É–∂–Ω—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ç–µ, —â–æ –ø–æ–¥—ñ—è —è–∫—É –≤–∏ –∑–∞–ø–ª–∞–Ω—É–≤–∞–ª–∏ –ó–ê–ö–Ü–ù–ß–ò–õ–ê–°–¨.\n\nüéü –ü–æ–¥—ñ—è: <b>{title[0]}</b>\n\n‚è≥ –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É: <b>{title[1].strftime("%Y-%m-%d %H:%M")}</b>\n\n‚åõ –î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: <b>{title[2].strftime("%Y-%m-%d %H:%M")}</b>')
                await db_com.send_message_end(pool, user_id, title[3])

        await asyncio.sleep(60)

